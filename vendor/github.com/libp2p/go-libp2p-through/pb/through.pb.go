// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/through.proto

package through_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//消息状态,含有错误信息的代码
type Through_Status int32

const (
	Through_SUCCESS                       Through_Status = 100
	Through_SERVICE_SRC_ADDR_TOO_LONG     Through_Status = 220
	Through_SERVICE_DST_ADDR_TOO_LONG     Through_Status = 221
	Through_SERVICE_SRC_MULTIADDR_INVALID Through_Status = 250
	Through_SERVICE_DST_MULTIADDR_INVALID Through_Status = 251
	Through_SERVICE_NO_CONN_TO_DST        Through_Status = 260
	Through_SERVICE_CANT_DIAL_DST         Through_Status = 261
	Through_SERVICE_CANT_OPEN_DST_STREAM  Through_Status = 262
	Through_SERVICE_CANT_SPEAK_THROUGH    Through_Status = 270
	Through_SERVICE_CANT_RELAY_TO_SELF    Through_Status = 280
	Through_SERVICE_TARGET_UNREGISTERED   Through_Status = 290
	Through_DISPOSE_SRC_ADDR_TOO_LONG     Through_Status = 320
	Through_DISPOSE_DST_ADDR_TOO_LONG     Through_Status = 321
	Through_DISPOSE_SRC_MULTIADDR_INVALID Through_Status = 350
	Through_DISPOSE_DST_MULTIADDR_INVALID Through_Status = 351
	Through_DISPOSE_THROUGH_REFUSED       Through_Status = 390
	Through_PING_UNREGISTER               Through_Status = 410
	Through_MALFORMED_MESSAGE             Through_Status = 400
	Through_REGISTER_LIMIT                Through_Status = 420

)

var Through_Status_name = map[int32]string{
	100: "SUCCESS",
	220: "SERVICE_SRC_ADDR_TOO_LONG",
	221: "SERVICE_DST_ADDR_TOO_LONG",
	250: "SERVICE_SRC_MULTIADDR_INVALID",
	251: "SERVICE_DST_MULTIADDR_INVALID",
	260: "SERVICE_NO_CONN_TO_DST",
	261: "SERVICE_CANT_DIAL_DST",
	262: "SERVICE_CANT_OPEN_DST_STREAM",
	270: "SERVICE_CANT_SPEAK_THROUGH",
	280: "SERVICE_CANT_RELAY_TO_SELF",
	290: "SERVICE_TARGET_UNREGISTERED",
	320: "DISPOSE_SRC_ADDR_TOO_LONG",
	321: "DISPOSE_DST_ADDR_TOO_LONG",
	350: "DISPOSE_SRC_MULTIADDR_INVALID",
	351: "DISPOSE_DST_MULTIADDR_INVALID",
	390: "DISPOSE_THROUGH_REFUSED",
	410: "PING_UNREGISTER",
	400: "MALFORMED_MESSAGE",
	420: "REGISTER_LIMIT",
}

var Through_Status_value = map[string]int32{
	"SUCCESS":                       100,
	"SERVICE_SRC_ADDR_TOO_LONG":     220,
	"SERVICE_DST_ADDR_TOO_LONG":     221,
	"SERVICE_SRC_MULTIADDR_INVALID": 250,
	"SERVICE_DST_MULTIADDR_INVALID": 251,
	"SERVICE_NO_CONN_TO_DST":        260,
	"SERVICE_CANT_DIAL_DST":         261,
	"SERVICE_CANT_OPEN_DST_STREAM":  262,
	"SERVICE_CANT_SPEAK_THROUGH":    270,
	"SERVICE_CANT_RELAY_TO_SELF":    280,
	"SERVICE_TARGET_UNREGISTERED":   290,
	"DISPOSE_SRC_ADDR_TOO_LONG":     320,
	"DISPOSE_DST_ADDR_TOO_LONG":     321,
	"DISPOSE_SRC_MULTIADDR_INVALID": 350,
	"DISPOSE_DST_MULTIADDR_INVALID": 351,
	"DISPOSE_THROUGH_REFUSED":       390,
	"PING_UNREGISTER":               410,
	"MALFORMED_MESSAGE":             400,
	"REGISTER_LIMIT":				 420,
}

func (x Through_Status) Enum() *Through_Status {
	p := new(Through_Status)
	*p = x
	return p
}

func (x Through_Status) String() string {
	return proto.EnumName(Through_Status_name, int32(x))
}

func (x *Through_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Through_Status_value, data, "Through_Status")
	if err != nil {
		return err
	}
	*x = Through_Status(value)
	return nil
}

func (Through_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcf520027010a762, []int{0, 0}
}

//
//消息类型,区分功能
//REGISTER     注册到穿透服务器
//PING         和穿透服务器心跳维持
//FIND         查询目标peer是否存在
//START        开始穿透
//STOP         停止穿透
//CAN_SERVICE  查询当前节点是否支持穿透
//STATUS       返回状态
type Through_Type int32

const (
	Through_REGISTER    Through_Type = 1
	Through_PING        Through_Type = 2
	Through_FIND        Through_Type = 3
	Through_SERVICE     Through_Type = 4
	Through_DISPOSE     Through_Type = 5
	Through_CAN_SERVICE Through_Type = 6
	Through_STATUS      Through_Type = 7
)

var Through_Type_name = map[int32]string{
	1: "REGISTER",
	2: "PING",
	3: "FIND",
	4: "SERVICE",
	5: "DISPOSE",
	6: "CAN_SERVICE",
	7: "STATUS",
}

var Through_Type_value = map[string]int32{
	"REGISTER":    1,
	"PING":        2,
	"FIND":        3,
	"SERVICE":     4,
	"DISPOSE":     5,
	"CAN_SERVICE": 6,
	"STATUS":      7,
}

func (x Through_Type) Enum() *Through_Type {
	p := new(Through_Type)
	*p = x
	return p
}

func (x Through_Type) String() string {
	return proto.EnumName(Through_Type_name, int32(x))
}

func (x *Through_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Through_Type_value, data, "Through_Type")
	if err != nil {
		return err
	}
	*x = Through_Type(value)
	return nil
}

func (Through_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcf520027010a762, []int{0, 1}
}

type Through struct {
	Type                 *Through_Type   `protobuf:"varint,1,opt,name=type,enum=through.pb.Through_Type" json:"type,omitempty"`
	SrcPeer              *Through_Peer   `protobuf:"bytes,2,opt,name=srcPeer" json:"srcPeer,omitempty"`
	DstPeer              *Through_Peer   `protobuf:"bytes,3,opt,name=dstPeer" json:"dstPeer,omitempty"`
	Code                 *Through_Status `protobuf:"varint,4,opt,name=code,enum=through.pb.Through_Status" json:"code,omitempty"`
	Time                 int64          `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
}

func (m *Through) Reset()         { *m = Through{} }
func (m *Through) String() string { return proto.CompactTextString(m) }
func (*Through) ProtoMessage()    {}
func (*Through) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf520027010a762, []int{0}
}

var xxx_messageInfo_Through proto.InternalMessageInfo

func (m *Through) GetType() Through_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Through_REGISTER
}

func (m *Through) GetSrcPeer() *Through_Peer {
	if m != nil {
		return m.SrcPeer
	}
	return nil
}

func (m *Through) GetDstPeer() *Through_Peer {
	if m != nil {
		return m.DstPeer
	}
	return nil
}

func (m *Through) GetCode() Through_Status {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Through_SUCCESS
}

func (m *Through) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type Through_Peer struct {
	Id                   []byte   `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Addrs                [][]byte `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
}

func (m *Through_Peer) Reset()         { *m = Through_Peer{} }
func (m *Through_Peer) String() string { return proto.CompactTextString(m) }
func (*Through_Peer) ProtoMessage()    {}
func (*Through_Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf520027010a762, []int{0, 0}
}

func (m *Through_Peer) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Through_Peer) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func init() {
	proto.RegisterEnum("through.pb.Through_Status", Through_Status_name, Through_Status_value)
	proto.RegisterEnum("through.pb.Through_Type", Through_Type_name, Through_Type_value)
	proto.RegisterType((*Through)(nil), "through.pb.Through")
	proto.RegisterType((*Through_Peer)(nil), "through.pb.Through.Peer")
}

func init() { proto.RegisterFile("pb/through.proto", fileDescriptor_dcf520027010a762) }

var fileDescriptor_dcf520027010a762 = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0xe5, 0xb1, 0xdb, 0x54, 0x37, 0x51, 0x3b, 0x5c, 0x95, 0x62, 0xd2, 0x02, 0x26, 0xab,
	0x2c, 0xaa, 0x20, 0xf5, 0x0d, 0x46, 0xf6, 0xc4, 0xb5, 0x70, 0xec, 0x68, 0x66, 0x5c, 0x89, 0xd5,
	0xa8, 0xad, 0x2d, 0x9a, 0x05, 0x4a, 0x94, 0xb8, 0x8b, 0xee, 0xa1, 0x4b, 0xc4, 0x12, 0xb1, 0x64,
	0xc1, 0x9e, 0x37, 0x80, 0xf7, 0xe0, 0xe7, 0x3d, 0x60, 0x83, 0xc6, 0x89, 0x4b, 0x42, 0x22, 0xb1,
	0x9b, 0xab, 0xf3, 0x9d, 0x33, 0xd7, 0x47, 0x1e, 0xa0, 0x93, 0x8b, 0x67, 0xe5, 0xd5, 0x74, 0x7c,
	0xfd, 0xf2, 0xaa, 0x37, 0x99, 0x8e, 0xcb, 0x31, 0xc2, 0xdd, 0x78, 0xd1, 0xf9, 0xd4, 0x80, 0x86,
	0x9a, 0x8f, 0x78, 0x0c, 0x4e, 0x79, 0x33, 0x29, 0x5c, 0xcb, 0xb3, 0xba, 0xbb, 0x27, 0x6e, 0xef,
	0x2f, 0xd6, 0x5b, 0x20, 0x3d, 0x75, 0x33, 0x29, 0x44, 0x45, 0xe1, 0x09, 0x34, 0x66, 0xd3, 0xcb,
	0x61, 0x51, 0x4c, 0x5d, 0xe2, 0x59, 0xdd, 0xe6, 0x66, 0x83, 0xd1, 0x45, 0x0d, 0x1a, 0x4f, 0x3e,
	0x2b, 0x2b, 0x8f, 0xfd, 0x3f, 0xcf, 0x02, 0xc4, 0x1e, 0x38, 0x97, 0xe3, 0xbc, 0x70, 0x9d, 0x6a,
	0xab, 0xf6, 0x26, 0x83, 0x2c, 0xcf, 0xcb, 0xeb, 0x99, 0xa8, 0x38, 0x44, 0x70, 0xca, 0xd1, 0xab,
	0xc2, 0xdd, 0xf2, 0xac, 0xae, 0x2d, 0xaa, 0x73, 0xfb, 0x18, 0x9c, 0x2a, 0x6b, 0x17, 0xc8, 0x28,
	0x77, 0x2d, 0x8f, 0x74, 0x5b, 0x82, 0x8c, 0x72, 0xdc, 0x87, 0xad, 0xf3, 0x3c, 0x9f, 0xce, 0x5c,
	0xe2, 0xd9, 0xdd, 0x96, 0x98, 0x0f, 0x9d, 0xcf, 0x0e, 0x6c, 0xcf, 0x23, 0xb1, 0x09, 0x0d, 0x99,
	0xf9, 0x3e, 0x97, 0x92, 0xe6, 0xf8, 0x18, 0x1e, 0x4a, 0x2e, 0xce, 0x22, 0x9f, 0x6b, 0x29, 0x7c,
	0xcd, 0x82, 0x40, 0x68, 0x95, 0xa6, 0x3a, 0x4e, 0x93, 0x90, 0x7e, 0xb3, 0x96, 0xf5, 0x40, 0xaa,
	0x7f, 0xf4, 0xef, 0x16, 0x76, 0xe0, 0xd1, 0xb2, 0x7f, 0x90, 0xc5, 0x2a, 0xaa, 0xa0, 0x28, 0x39,
	0x63, 0x71, 0x14, 0xd0, 0x5f, 0x2b, 0x8c, 0xc9, 0x58, 0x67, 0x7e, 0x5b, 0x78, 0x08, 0x07, 0x35,
	0x93, 0xa4, 0xda, 0x4f, 0x93, 0x44, 0xab, 0xd4, 0xe0, 0xf4, 0x35, 0xc1, 0x36, 0xdc, 0xaf, 0x45,
	0x9f, 0x25, 0x4a, 0x07, 0x11, 0x8b, 0x2b, 0xed, 0x0d, 0xc1, 0xa7, 0x70, 0xb4, 0xa2, 0xa5, 0x43,
	0x9e, 0x54, 0xd7, 0x48, 0x25, 0x38, 0x1b, 0xd0, 0x5b, 0x82, 0x4f, 0xa0, 0xbd, 0x82, 0xc8, 0x21,
	0x67, 0xcf, 0xb5, 0x3a, 0x15, 0x69, 0x16, 0x9e, 0xd2, 0xb7, 0xeb, 0x80, 0xe0, 0x31, 0x7b, 0x61,
	0xee, 0x97, 0x3c, 0xee, 0xd3, 0xf7, 0x04, 0x3d, 0x38, 0xac, 0x01, 0xc5, 0x44, 0xc8, 0x95, 0xce,
	0x12, 0xc1, 0xc3, 0x48, 0x2a, 0x2e, 0x78, 0x40, 0x3f, 0x12, 0xd3, 0x53, 0x10, 0xc9, 0x61, 0x2a,
	0x37, 0xf5, 0xf8, 0x65, 0x45, 0x5f, 0xef, 0xf1, 0x2b, 0x31, 0x1d, 0x2d, 0xfb, 0xd7, 0x3b, 0xfa,
	0xb1, 0xc2, 0x6c, 0xee, 0xf1, 0x27, 0xc1, 0x23, 0x78, 0x50, 0x33, 0x8b, 0x0f, 0xd4, 0x82, 0xf7,
	0x33, 0xc9, 0x03, 0x7a, 0x6b, 0xe3, 0x3e, 0xec, 0x0d, 0xa3, 0x24, 0x5c, 0xda, 0x9e, 0x7e, 0xb0,
	0xf1, 0x00, 0xee, 0x0d, 0x58, 0xdc, 0x4f, 0xc5, 0x80, 0x07, 0x7a, 0xc0, 0xa5, 0x64, 0x21, 0xa7,
	0xef, 0xec, 0x8e, 0x06, 0xc7, 0xbc, 0x0d, 0x6c, 0xc1, 0xce, 0x1d, 0x6e, 0xe1, 0x0e, 0x38, 0x26,
	0x83, 0x12, 0x73, 0xea, 0x47, 0x49, 0x40, 0xed, 0xea, 0x97, 0x9a, 0xf7, 0x43, 0x1d, 0x33, 0x2c,
	0x56, 0xa0, 0x5b, 0xb8, 0x07, 0x4d, 0x9f, 0x25, 0xba, 0x56, 0xb7, 0x11, 0x60, 0x5b, 0x2a, 0xa6,
	0x32, 0x49, 0x1b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x81, 0x37, 0xd2, 0xf0, 0xc7, 0x03, 0x00,
	0x00,
}
