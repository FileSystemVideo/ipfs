syntax = "proto2";

package through.pb;

message Through {

  //消息状态,含有错误信息的代码
  enum Status {
    SUCCESS                    = 100;
    SERVICE_SRC_ADDR_TOO_LONG      = 220;      //穿透服务 - 源地址太长
    SERVICE_DST_ADDR_TOO_LONG      = 221;      //穿透服务 - 目标地址太长
    SERVICE_SRC_MULTIADDR_INVALID  = 250;     //穿透服务 - 源多地址无效
    SERVICE_DST_MULTIADDR_INVALID  = 251;     //穿透服务 - 目标多地址无效
    SERVICE_NO_CONN_TO_DST         = 260;      //穿透服务 - 无法连接到目标
    SERVICE_CANT_DIAL_DST          = 261;      //穿透服务 - 无法拨号到目标
    SERVICE_CANT_OPEN_DST_STREAM   = 262;     //穿透服务 - 无法打开目标流
    SERVICE_CANT_SPEAK_THROUGH       = 270;    //穿透服务 - 当前节点不支持穿透
    SERVICE_CANT_RELAY_TO_SELF     = 280;      //穿透服务 - 目标地址为自己
    SERVICE_TARGET_UNREGISTERED     = 290;      //穿透服务 - 目标未注册
    DISPOSE_SRC_ADDR_TOO_LONG     = 320;       //处理穿透 - 源地址太长
    DISPOSE_DST_ADDR_TOO_LONG     = 321;       //处理穿透 - 目标地址太长
    DISPOSE_SRC_MULTIADDR_INVALID = 350;       //处理穿透 - 源多地址无效
    DISPOSE_DST_MULTIADDR_INVALID = 351;       //处理穿透 - 目标多地址无效
    DISPOSE_THROUGH_REFUSED         = 390;      //处理穿透 - 目标拒绝
    PING_UNREGISTER               = 410;         //ping 未注册的
    MALFORMED_MESSAGE          = 400;            //消息不完整
  }

  /*
  消息类型,区分功能
  REGISTER     注册到穿透服务器
  PING         和穿透服务器心跳维持
  FIND         查询目标peer是否存在
  START        开始穿透
  STOP         停止穿透
  CAN_SERVICE  查询当前节点是否支持穿透
  STATUS       返回状态
  */
  enum Type {
    REGISTER      = 1;
    PING          = 2;
    FIND          = 3;
    SERVICE       = 4;
    DISPOSE       = 5;
    CAN_SERVICE   = 6;
    STATUS        = 7;
  }

  message Peer {
    required bytes id = 1;    // peerID
    repeated bytes addrs = 2; // peer 的当前地址
  }

  optional Type type = 1;     // 消息类型
  optional Peer srcPeer = 2;  // 当类型为 SERVICE 或 DISPOSE 或 FIND 时 将使用 srcPeer 和 dstPeer
  optional Peer dstPeer = 3;
  optional Status code = 4;   // 状态码, 当类型为状态时使用.
  optional int64 time = 5;
}
